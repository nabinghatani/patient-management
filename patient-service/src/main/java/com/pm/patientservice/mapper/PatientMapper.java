package com.pm.patientservice.mapper;

import com.pm.patientservice.dto.PatientRequestDTO;
import com.pm.patientservice.dto.PatientResponseDTO;
import com.pm.patientservice.model.Patient;

import java.time.LocalDate;

/**
 * Utility class for mapping between Patient entity and DTOs.
 * This class provides static methods to convert a {@link Patient} entity to a {@link PatientResponseDTO}
 * for API responses and a {@link PatientRequestDTO} to a {@link Patient} entity for database operations.
 */
public class PatientMapper {

    /**
     * Converts a {@link Patient} entity to a {@link PatientResponseDTO}.
     * Maps the fields of the Patient entity to the corresponding fields in the DTO,
     * converting the UUID ID to a string and the LocalDate dateOfBirth to a string.
     * The registeredDate field is excluded from the DTO to hide internal data.
     *
     * @param patient the Patient entity to convert
     * @return a PatientResponseDTO containing the mapped patient data
     */
    public static PatientResponseDTO toPatientResponseDTO(Patient patient) {
        var responseDTO = new PatientResponseDTO();
        responseDTO.setId(patient.getId().toString());
        responseDTO.setName(patient.getName());
        responseDTO.setEmail(patient.getEmail());
        responseDTO.setAddress(patient.getAddress());
        responseDTO.setDateOfBirth(patient.getDateOfBirth().toString());
        return responseDTO;
    }

    /**
     * Converts a {@link PatientRequestDTO} to a {@link Patient} entity.
     * Maps the fields of the DTO to the corresponding fields in the Patient entity,
     * parsing the string-based dateOfBirth and registeredDate to LocalDate objects.
     * The ID is not set as it is typically generated by the database.
     *
     * @param requestDTO the PatientRequestDTO containing the input data
     * @return a Patient entity with the mapped data
     */
    public static Patient toModel(PatientRequestDTO requestDTO) {
        var patient = new Patient();
        patient.setName(requestDTO.getName());
        patient.setEmail(requestDTO.getEmail());
        patient.setAddress(requestDTO.getAddress());
        patient.setDateOfBirth(LocalDate.parse(requestDTO.getDateOfBirth()));
        patient.setRegisteredDate(LocalDate.parse(requestDTO.getRegisteredDate()));
        return patient;
    }
}
